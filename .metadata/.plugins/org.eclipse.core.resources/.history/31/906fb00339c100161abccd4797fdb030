package week5;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class MapUtil {
	//@ ensures  

//	public static <K, V> boolean isOneOnOne(Map<K, V> map) {
//
//		boolean result = true;
//		
//        for (V value : map.values()) {
//            int i = 0;
//            for (K key : map.keySet()) {
//                if (value.equals(map.get(key))) i++;
//                if (i > 1) result = !result;
//            }
//        }
//        return result;
//    }
	
	public static <K, V> boolean isOneOnOne(Map<K, V> map) {
    	Object[] keys = map.keySet().toArray(new Object[map.size()]);
    	Object[] values = new Object[map.size()];
    	
    	for (int i = 0; i < keys.length; i++) {
    		for (int j = 0; j < map.size(); j++) {
    			if (values[j] != null && values[j].equals(map.get(keys[i]))) {
    				return false;
    			}
    		}
   			values[i] = map.get(keys[i]);
    	}
return true;
	}
	
	public static <K, V> 
	boolean isSurjectiveOnRange(Map<K, V> map, Set<V> range) {
		// TODO: implement, see exercise P-5.2
		return false;
	}
	public static <K, V> Map<V, Set<K>> inverse(Map<K, V> map) {
		// TODO: implement, see exercise P-5.3
		return null;
	}
	public static <K, V> Map<V, K> inverseBijection(Map<K, V> map) {
		// TODO: implement, see exercise P-5.3
		return null;
	}
	public static <K, V, W> boolean compatible(Map<K, V> f, Map<V, W> g) {
		// TODO: implement, see exercise P-5.4
		return false;
	}
	public static <K, V, W> Map<K, W> compose(Map<K, V> f, Map<V, W> g) {
		// TODO: implement, see exercise P-5.5
		return null;
	}
}
