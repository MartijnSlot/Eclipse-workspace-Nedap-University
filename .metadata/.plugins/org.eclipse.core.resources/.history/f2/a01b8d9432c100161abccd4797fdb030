package week5;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

public class MapUtil {
	//@ ensures  

	public static <K, V> boolean isOneOnOne(Map<K, V> map) {
		
		boolean result = false;
		
		for(K key : map.keySet()) {
			if (map.containsKey(key)) {
				result = !result;
			}
		return result;
		}
		
		return result;
	}
	public static <K, V> 
	boolean isSurjectiveOnRange(Map<K, V> map, Set<V> range) {
		// TODO: implement, see exercise P-5.2
		return false;
	}
	public static <K, V> Map<V, Set<K>> inverse(Map<K, V> map) {
		// TODO: implement, see exercise P-5.3
		return null;
	}
	public static <K, V> Map<V, K> inverseBijection(Map<K, V> map) {
		// TODO: implement, see exercise P-5.3
		return null;
	}
	public static <K, V, W> boolean compatible(Map<K, V> f, Map<V, W> g) {
		// TODO: implement, see exercise P-5.4
		return false;
	}
	public static <K, V, W> Map<K, W> compose(Map<K, V> f, Map<V, W> g) {
		// TODO: implement, see exercise P-5.5
		return null;
	}
}
